<ref *1> Nuxt {
  _logger: _ {
    _reporters: [ [Vu], [Object] ],
    _types: {
      silent: [Object],
      fatal: [Object],
      error: [Object],
      warn: [Object],
      log: [Object],mutation
      debug: [Object],
      trace: [Object],
      verbose: [Object],
      ready: [Object],
      start: [Object]
    },
    level: 3,
    _defaults: {},
    _async: undefined,
    _stdout: undefined,
    _stderr: undefined,
    _mockFn: undefined,
    _throttle: 1000,
    _throttleMin: 5,
    silent: [Function (anonymous)] { raw: [Function (anonymous)] },
    fatal: [Function (anonymous)] { raw: [Function (anonymous)] },
    error: [Function (anonymous)] { raw: [Function (anonymous)] },
    warn: [Function (anonymous)] { raw: [Function (anonymous)] },
    log: [Function (anonymous)] { raw: [Function (anonymous)] },
    info: [Function (anonymous)] { raw: [Function (anonymous)] },
    success: [Function (anonymous)] { raw: [Function (anonymous)] },
    debug: [Function (anonymous)] { raw: [Function (anonymous)] },
    trace: [Function (anonymous)] { raw: [Function (anonymous)] },
    verbose: [Function (anonymous)] { raw: [Function (anonymous)] },
    ready: [Function (anonymous)] { raw: [Function (anonymous)] },
    start: [Function (anonymous)] { raw: [Function (anonymous)] },
    _lastLogSerialized: undefined,
    _lastLog: undefined,
    _lastLogTime: undefined,
    _lastLogCount: 0,
    _throttleTimeout: undefined,
    Consola: [class _],
    BasicReporter: [class S],
    FancyReporter: [class Vu extends S],
    JSONReporter: [class Wu],
    WinstonReporter: [class zu],
    LogLevel: {
      '0': 'Error',
      '1': 'Warn',
      '2': 'Log',
      '3': 'Success',
      '4': 'Debug',
      '5': 'Trace',
      Fatal: 0,
      Error: 0,
      Warn: 1,
      Log: 2,
      Info: 3,
      Success: 3,
      Debug: 4,
      Trace: 5,
      Silent: -Infinity,
      '-Infinity': 'Silent',
      Verbose: Infinity,
      Infinity: 'Verbose'
    }
  },
  _hooks: {
    close: [ [Function (anonymous)] ],
    'server:devMiddleware': [ [Function (anonymous)] ],
    'builder:prepared': [ [Function (anonymous)] ],
    'generate:route': [ [Function (anonymous)] ],
    'generate:done': [ [AsyncFunction (anonymous)] ],
    'vite:extend': [ [AsyncFunction (anonymous)] ],
    'modules:done': [ [Function (anonymous)] ],
    'build:done': [ [Function (anonymous)] ]
  },
  _deprecatedHooks: {
    'render:context': {
      to: '_render:context',
      message: '`render:context(nuxt)` is deprecated, Please use `vue-renderer:ssr:context(context)`'
    },
    'render:routeContext': {
      to: '_render:context',
      message: '`render:routeContext(nuxt)` is deprecated, Please use `vue-renderer:ssr:context(context)`'
    },
    showReady: 'webpack:done',
    'export:done': 'generate:done',
    'export:before': 'generate:before',
    'export:extendRoutes': 'generate:extendRoutes',
    'export:distRemoved': 'generate:distRemoved',
    'export:distCopied': 'generate:distCopied',
    'export:route': 'generate:route',
    'export:routeFailed': 'generate:routeFailed',
    'export:page': 'generate:page',
    'export:routeCreated': 'generate:routeCreated'
  },
  hook: [Function: bound hook],
  callHook: [Function: bound callHook] AsyncFunction,
  options: {
    telemetry: { enabled: false },
    head: {
      title: 'demo',
      htmlAttrs: [Object],
      meta: [Array],
      link: [Array],
      style: [],
      script: []
    },
    css: [],
    plugins: [ '@/plugins/setupServices' ],
    components: true,
    buildModules: [
      '@nuxtjs/composition-api/module',
      '@nuxt/typescript-build',
      '@/modules/testing.ts'
    ],
    modules: [ '@nuxtjs/axios' ],
    axios: { baseURL: '/' },
    build: {
      publicPath: '/_nuxt/',
      quiet: false,
      analyze: false,
      profile: false,
      extractCSS: false,
      cssSourceMap: true,
      ssr: true,
      parallel: false,
      cache: false,
      standalone: false,
      serverURLPolyfill: 'url',
      filenames: [Object],
      loaders: [Object],
      styleResources: {},
      plugins: [],
      terser: {},
      hardSource: false,
      aggressiveCodeRemoval: false,
      optimizeCSS: false,
      optimization: [Object],
      splitChunks: [Object],
      corejs: 'auto',
      babel: [Object],
      transpile: [Array],
      postcss: [Object],
      html: [Object],
      template: undefined,
      templates: [Array],
      watch: [],
      devMiddleware: [Object],
      hotMiddleware: {},
      stats: [Object],
      friendlyErrors: true,
      additionalExtensions: [Array],
      warningIgnoreFilters: [],
      followSymlinks: false,
      loadingScreen: {},
      indicator: [Object],
      _publicPath: '/_nuxt/',
      extend: [Function (anonymous)]
    },
    _nuxtConfigFile: '/home/mitch/workspace/dev/demo/nuxt.config.js',
    _nuxtConfigFiles: [ '/home/mitch/workspace/dev/demo/nuxt.config.js' ],
    rootDir: '/home/mitch/workspace/dev/demo',
    _env: [Object: null prototype] {
      PROFILEHOME: '',
      LESSOPEN: '| /usr/bin/lesspipe %s',
      KDE_FULL_SESSION: 'true',
      npm_package_devDependencies_babel_core: '7.0.0-bridge.0',
      npm_package_devDependencies__nuxtjs_eslint_module: '^3.1.0',
      npm_package_devDependencies__nuxt_typescript_build: '^2.1.0',
      npm_package_dependencies_vue_template_compiler: '^2.7.10',
      LANGUAGE: 'en_US',
      USER: 'mitch',
      PAM_KWALLET5_LOGIN: '/run/user/1000/kwallet5.socket',
      npm_package_devDependencies_jest: '^29.1.2',
      npm_package_devDependencies__nuxt_types: '^2.15.8',
      npm_config_version_commit_hooks: 'true',
      npm_config_user_agent: 'yarn/1.22.10 npm/? node/v16.17.0 linux x64',
      QT_SCREEN_SCALE_FACTORS: 'eDP=1;HDMI-A-0=1;DisplayPort-0=1;DisplayPort-1=1;',
      XDG_SEAT: 'seat0',
      npm_package_dependencies_vue: '^2.7.10',
      npm_config_bin_links: 'true',
      XDG_SESSION_TYPE: 'x11',
      COMPIZ_CONFIG_PROFILE: 'mint',
      npm_node_execpath: '/home/mitch/.nvm/versions/node/v16.17.0/bin/node',
      npm_package_devDependencies_vue_jest: '^3.0.4',
      npm_config_init_version: '1.0.0',
      XCURSOR_SIZE: '24',
      KONSOLE_VERSION: '211203',
      SHLVL: '1',
      HOME: '/home/mitch',
      KDE_APPLICATIONS_AS_SCOPE: '1',
      OLDPWD: '/home/mitch/workspace/dev',
      npm_package_devDependencies_eslint_plugin_nuxt: '^4.0.0',
      DESKTOP_SESSION: 'plasma',
      NVM_BIN: '/home/mitch/.nvm/versions/node/v16.17.0/bin',
      NVM_INC: '/home/mitch/.nvm/versions/node/v16.17.0/include/node',
      COREPACK_ROOT: '/home/mitch/.nvm/versions/node/v16.17.0/lib/node_modules/corepack',
      npm_config_init_license: 'MIT',
      SHELL_SESSION_ID: '2f61a48b19954b1fbe4c9131b6728a16',
      GTK_RC_FILES: '/etc/gtk/gtkrc:/home/mitch/.gtkrc:/home/mitch/.config/gtkrc',
      GTK_MODULES: 'gail:atk-bridge',
      XDG_SEAT_PATH: '/org/freedesktop/DisplayManager/Seat0',
      KDE_SESSION_VERSION: '5',
      YARN_WRAP_OUTPUT: 'false',
      npm_package_dependencies__nuxtjs_composition_api: '^0.33.1',
      npm_config_version_tag_prefix: 'v',
      LC_MONETARY: 'nl_NL.UTF-8',
      KONSOLE_DBUS_SESSION: '/Sessions/1',
      SYSTEMD_EXEC_PID: '6201',
      DBUS_SESSION_BUS_ADDRESS: 'unix:path=/run/user/1000/bus',
      COLORTERM: 'truecolor',
      npm_package_description: '## Build Setup',
      NVM_DIR: '/home/mitch/.nvm',
      npm_package_readmeFilename: 'README.md',
      npm_package_dependencies_nuxt: '^2.15.8',
      IM_CONFIG_PHASE: '1',
      npm_package_devDependencies_babel_jest: '^29.1.2',
      npm_package_scripts_dev: 'nuxt',
      LOGNAME: 'mitch',
      WINDOWID: '46137351',
      QT_AUTO_SCREEN_SCALE_FACTOR: '0',
      _: '/home/mitch/.nvm/versions/node/v16.17.0/bin/yarn',
      npm_package_devDependencies_ts_jest: '^29.0.3',
      npm_package_private: 'true',
      XDG_SESSION_CLASS: 'user',
      COLORFGBG: '15;0',
      npm_package_scripts_lint: 'yarn lint:js',
      npm_config_registry: 'https://registry.yarnpkg.com',
      TERM: 'xterm-256color',
      XDG_SESSION_ID: 'c4',
      npm_package_dependencies_core_js: '^3.25.3',
      npm_package_scripts_start: 'nuxt start',
      npm_config_ignore_scripts: '',
      GTK2_RC_FILES: '/etc/gtk-2.0/gtkrc:/home/mitch/.gtkrc-2.0:/home/mitch/.config/gtkrc-2.0',
      npm_package_devDependencies_eslint_plugin_jest: '^27.0.4',
      PATH: '/tmp/yarn--1667404223209-0.23463966221402366:/home/mitch/workspace/dev/demo/node_modules/.bin:/home/mitch/.config/yarn/link/node_modules/.bin:/home/mitch/.yarn/bin:/home/mitch/.nvm/versions/node/v16.17.0/libexec/lib/node_modules/npm/bin/node-gyp-bin:/home/mitch/.nvm/versions/node/v16.17.0/lib/node_modules/npm/bin/node-gyp-bin:/home/mitch/.nvm/versions/node/v16.17.0/bin/node_modules/npm/bin/node-gyp-bin:/home/mitch/.nvm/versions/node/v16.17.0/bin:/home/mitch/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
      NODE: '/home/mitch/.nvm/versions/node/v16.17.0/bin/node',
      SESSION_MANAGER: 'local/workstation-mitch:@/tmp/.ICE-unix/21349,unix/workstation-mitch:/tmp/.ICE-unix/21349',
      GDM_LANG: 'en_US',
      GTK3_MODULES: 'xapp-gtk3-module',
      npm_package_devDependencies__nuxtjs_eslint_config_typescript: '^11.0.0',
      npm_package_devDependencies__babel_eslint_parser: '^7.19.1',
      npm_package_scripts_lint_js: 'eslint --ext ".js,.ts,.vue" --ignore-path .gitignore .',
      npm_package_name: 'demo',
      XDG_SESSION_PATH: '/org/freedesktop/DisplayManager/Session1',
      LC_ADDRESS: 'nl_NL.UTF-8',
      XDG_RUNTIME_DIR: '/run/user/1000',
      XCURSOR_THEME: 'Nordic-cursors',
      DISPLAY: ':0',
      npm_config_ignore_path: '1',
      LANG: 'en_US.UTF-8',
      XDG_CURRENT_DESKTOP: 'KDE',
      LC_TELEPHONE: 'nl_NL.UTF-8',
      npm_package_devDependencies_eslint: '^8.24.0',
      npm_package_devDependencies__vue_test_utils: '^1.3.0',
      XDG_SESSION_DESKTOP: 'plasma',
      XAUTHORITY: '/home/mitch/.Xauthority',
      LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
      npm_lifecycle_script: 'nuxt',
      XDG_GREETER_DATA_DIR: '/var/lib/lightdm-data/mitch',
      npm_package_scripts_test: 'jest',
      npm_config_version_git_message: 'v%s',
      SHELL: '/bin/bash',
      LC_NAME: 'nl_NL.UTF-8',
      npm_lifecycle_event: 'dev',
      npm_package_devDependencies_jest_environment_jsdom: '^29.1.2',
      npm_package_version: '1.0.0',
      QT_ACCESSIBILITY: '1',
      GDMSESSION: 'plasma',
      npm_config_argv: '{"remain":[],"cooked":["run","dev"],"original":["dev"]}',
      npm_package_scripts_build: 'nuxt build',
      LESSCLOSE: '/usr/bin/lesspipe %s %s',
      YARN_IGNORE_PATH: '1',
      KONSOLE_DBUS_SERVICE: ':1.282',
      LC_MEASUREMENT: 'nl_NL.UTF-8',
      npm_config_version_git_tag: 'true',
      npm_config_version_git_sign: '',
      GPG_AGENT_INFO: '/run/user/1000/gnupg/S.gpg-agent:0:1',
      LC_IDENTIFICATION: 'nl_NL.UTF-8',
      npm_package_scripts_generate: 'nuxt generate',
      npm_config_strict_ssl: 'true',
      XDG_VTNR: '7',
      npm_package_scripts_lintfix: 'yarn lint:js --fix',
      PWD: '/home/mitch/workspace/dev/demo',
      npm_execpath: '/home/mitch/.yarn/releases/yarn-1.22.10.cjs',
      XDG_CONFIG_DIRS: '/home/mitch/.config/kdedefaults:/etc/xdg/xdg-plasma:/etc/xdg:/usr/share/kubuntu-default-settings/kf5-settings',
      NVM_CD_FLAGS: '',
      XDG_DATA_DIRS: '/usr/share/plasma:/home/mitch/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share',
      npm_package_dependencies_vue_server_renderer: '^2.7.10',
      LC_NUMERIC: 'nl_NL.UTF-8',
      npm_package_devDependencies_eslint_plugin_vue: '^9.5.1',
      npm_config_save_prefix: '^',
      npm_config_ignore_optional: '',
      LC_PAPER: 'nl_NL.UTF-8',
      KDE_SESSION_UID: '1000',
      npm_package_dependencies__nuxtjs_axios: '^5.13.6',
      INIT_CWD: '/home/mitch/workspace/dev/demo',
      NODE_ENV: 'development'
    },
    _envConfig: {
      dotenv: '/home/mitch/workspace/dev/demo/.env',
      env: [Object],
      expand: true
    },
    server: {
      https: false,
      port: 3000,
      host: 'localhost',
      socket: undefined,
      timing: false
    },
    dev: true,
    _build: true,
    _cli: true,
    __normalized__: true,
    globalName: 'nuxt',
    vue: { config: [Object] },
    vueMeta: null,
    fetch: { server: true, client: true },
    extendPlugins: null,
    layouts: {},
    ErrorPage: null,
    loading: {
      color: 'black',
      failedColor: 'red',
      height: '2px',
      throttle: 200,
      duration: 5000,
      continuous: false,
      rtl: false,
      css: true
    },
    loadingIndicator: {
      name: 'default',
      color: 'black',
      color2: '#F5F5F5',
      background: 'white',
      dev: true,
      loading: 'Loading...'
    },
    pageTransition: {
      name: 'page',
      mode: 'out-in',
      appear: false,
      appearClass: 'appear',
      appearActiveClass: 'appear-active',
      appearToClass: 'appear-to'
    },
    layoutTransition: { name: 'layout', mode: 'out-in' },
    features: {
      store: true,
      layouts: true,
      meta: true,
      middleware: true,
      transitions: true,
      deprecations: true,
      validate: true,
      asyncData: true,
      fetch: true,
      clientOnline: true,
      clientPrefetch: true,
      componentAliases: true,
      componentClientOnly: true
    },
    test: false,
    debug: true,
    env: {},
    createRequire: [Function (anonymous)],
    target: 'server',
    ssr: true,
    mode: 'universal',
    modern: undefined,
    _modules: [ [Array], '@nuxt/components', '@nuxt/telemetry' ],
    globals: {
      id: [Function: id],
      nuxt: [Function: nuxt],
      context: [Function: context],
      pluginPrefix: [Function: pluginPrefix],
      readyCallback: [Function: readyCallback],
      loadedCallback: [Function: loadedCallback]
    },
    serverMiddleware: [],
    srcDir: '/home/mitch/workspace/dev/demo',
    buildDir: '/home/mitch/workspace/dev/demo/.nuxt',
    modulesDir: [
      '/home/mitch/workspace/dev/demo/node_modules/nuxt/bin/node_modules',
      '/home/mitch/workspace/dev/demo/node_modules/nuxt/node_modules',
      '/home/mitch/workspace/dev/demo/node_modules',
      '/home/mitch/workspace/dev/node_modules',
      '/home/mitch/workspace/node_modules',
      '/home/mitch/node_modules',
      '/home/node_modules',
      '/node_modules'
    ],
    dir: {
      assets: 'assets',
      app: 'app',
      layouts: 'layouts',
      middleware: 'middleware',
      pages: 'pages',
      static: 'static',
      store: 'store'
    },
    extensions: [ 'js', 'mjs', 'ts' ],
    styleExtensions: [
      'css',     'pcss',
      'postcss', 'styl',
      'stylus',  'scss',
      'sass',    'less'
    ],
    alias: {
      'vue/dist/vue.common.dev': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.common.dev.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.common': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.common.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.common.prod': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.common.prod.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.esm.browser': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.esm.browser.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.esm.browser.min': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.esm.browser.min.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.esm': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.esm.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.min': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.min.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime.common.dev': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime.common.dev.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime.common': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime.common.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime.common.prod': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime.common.prod.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime.esm': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime.esm.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime.min': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      'vue/dist/vue.runtime.min.js': '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      '~~': '/home/mitch/workspace/dev/demo',
      '@@': '/home/mitch/workspace/dev/demo',
      '~': '/home/mitch/workspace/dev/demo',
      '@': '/home/mitch/workspace/dev/demo',
      assets: '/home/mitch/workspace/dev/demo/assets',
      static: '/home/mitch/workspace/dev/demo/static',
      '@nuxtjs/composition-api/dist/runtime/globals': '/home/mitch/workspace/dev/demo/.nuxt/composition-api/globals.mjs',
      vue: '/home/mitch/workspace/dev/demo/node_modules/vue/dist/vue.common.dev.js',
      '@nuxtjs/composition-api': '/home/mitch/workspace/dev/demo/node_modules/@nuxtjs/composition-api/dist/runtime/index.mjs'
    },
    ignoreOptions: undefined,
    ignorePrefix: '-',
    ignore: [ '**/*.test.*', '**/*.spec.*', '**/-*.*' ],
    watch: [ '/home/mitch/workspace/dev/demo/nuxt.config.js' ],
    watchers: {
      rewatchOnRawEvents: undefined,
      webpack: [Object],
      chokidar: [Object]
    },
    editor: undefined,
    hooks: null,
    privateRuntimeConfig: {},
    publicRuntimeConfig: { _app: [Object] },
    messages: {
      loading: 'Loading...',
      error_404: 'This page could not be found',
      server_error: 'Server error',
      nuxtjs: 'Nuxt',
      back_to_home: 'Back to the home page',
      server_error_details: 'An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details.',
      client_error: 'Error',
      client_error_details: 'An error occurred while rendering the page. Check developer tools console for details.'
    },
    modes: { universal: [Object], spa: [Object] },
    render: {
      bundleRenderer: [Object],
      crossorigin: undefined,
      resourceHints: true,
      ssr: true,
      ssrLog: true,
      http2: [Object],
      static: [Object],
      compressor: [Object],
      etag: [Object],
      csp: false,
      dist: [Object],
      fallback: [Object]
    },
    router: {
      mode: 'history',
      base: '/',
      routes: [],
      routeNameSplitter: '-',
      middleware: [],
      linkActiveClass: 'nuxt-link-active',
      linkExactActiveClass: 'nuxt-link-exact-active',
      linkPrefetchedClass: false,
      extendRoutes: null,
      scrollBehavior: null,
      parseQuery: false,
      stringifyQuery: false,
      fallback: false,
      prefetchLinks: true,
      prefetchPayloads: true,
      trailingSlash: undefined
    },
    cli: { badgeMessages: [], bannerColor: 'blue' },
    generate: {
      dir: '/home/mitch/workspace/dev/demo/dist',
      routes: [],
      exclude: [],
      concurrency: 500,
      interval: 0,
      subFolders: true,
      fallback: '200.html',
      crawler: true,
      manifest: true,
      cache: [Object],
      staticAssets: [Object]
    },
    appTemplatePath: '/home/mitch/workspace/dev/demo/.nuxt/views/app.template.html',
    store: true,
    app: { basePath: '/', assetsPath: '/_nuxt/', cdnURL: null }
  },
  resolver: Resolver {
    nuxt: [Circular *1],
    options: {
      telemetry: [Object],
      head: [Object],
      css: [],
      plugins: [Array],
      components: true,
      buildModules: [Array],
      modules: [Array],
      axios: [Object],
      build: [Object],
      _nuxtConfigFile: '/home/mitch/workspace/dev/demo/nuxt.config.js',
      _nuxtConfigFiles: [Array],
      rootDir: '/home/mitch/workspace/dev/demo',
      _env: [Object: null prototype],
      _envConfig: [Object],
      server: [Object],
      dev: true,
      _build: true,
      _cli: true,
      __normalized__: true,
      globalName: 'nuxt',
      vue: [Object],
      vueMeta: null,
      fetch: [Object],
      extendPlugins: null,
      layouts: {},
      ErrorPage: null,
      loading: [Object],
      loadingIndicator: [Object],
      pageTransition: [Object],
      layoutTransition: [Object],
      features: [Object],
      test: false,
      debug: true,
      env: {},
      createRequire: [Function (anonymous)],
      target: 'server',
      ssr: true,
      mode: 'universal',
      modern: undefined,
      _modules: [Array],
      globals: [Object],
      serverMiddleware: [],
      srcDir: '/home/mitch/workspace/dev/demo',
      buildDir: '/home/mitch/workspace/dev/demo/.nuxt',
      modulesDir: [Array],
      dir: [Object],
      extensions: [Array],
      styleExtensions: [Array],
      alias: [Object],
      ignoreOptions: undefined,
      ignorePrefix: '-',
      ignore: [Array],
      watch: [Array],
      watchers: [Object],
      editor: undefined,
      hooks: null,
      privateRuntimeConfig: {},
      publicRuntimeConfig: [Object],
      messages: [Object],
      modes: [Object],
      render: [Object],
      router: [Object],
      cli: [Object],
      generate: [Object],
      appTemplatePath: '/home/mitch/workspace/dev/demo/.nuxt/views/app.template.html',
      store: true,
      app: [Object]
    },
    resolvePath: [Function: bound resolvePath],
    resolveAlias: [Function: bound resolveAlias],
    resolveModule: [Function: bound resolveModule],
    requireModule: [Function: bound requireModule],
    _createRequire: [Function (anonymous)],
    _require: [Function: jiti] {
      resolve: [Function],
      cache: [Object: null prototype],
      extensions: [Object: null prototype],
      main: [Module],
      transform: [Function: transform],
      register: [Function (anonymous)]
    }
  },
  moduleContainer: bound ModuleContainer {
    nuxt: [Circular *1],
    options: {
      telemetry: [Object],
      head: [Object],
      css: [],
      plugins: [Array],
      components: true,
      buildModules: [Array],
      modules: [Array],
      axios: [Object],
      build: [Object],
      _nuxtConfigFile: '/home/mitch/workspace/dev/demo/nuxt.config.js',
      _nuxtConfigFiles: [Array],
      rootDir: '/home/mitch/workspace/dev/demo',
      _env: [Object: null prototype],
      _envConfig: [Object],
      server: [Object],
      dev: true,
      _build: true,
      _cli: true,
      __normalized__: true,
      globalName: 'nuxt',
      vue: [Object],
      vueMeta: null,
      fetch: [Object],
      extendPlugins: null,
      layouts: {},
      ErrorPage: null,
      loading: [Object],
      loadingIndicator: [Object],
      pageTransition: [Object],
      layoutTransition: [Object],
      features: [Object],
      test: false,
      debug: true,
      env: {},
      createRequire: [Function (anonymous)],
      target: 'server',
      ssr: true,
      mode: 'universal',
      modern: undefined,
      _modules: [Array],
      globals: [Object],
      serverMiddleware: [],
      srcDir: '/home/mitch/workspace/dev/demo',
      buildDir: '/home/mitch/workspace/dev/demo/.nuxt',
      modulesDir: [Array],
      dir: [Object],
      extensions: [Array],
      styleExtensions: [Array],
      alias: [Object],
      ignoreOptions: undefined,
      ignorePrefix: '-',
      ignore: [Array],
      watch: [Array],
      watchers: [Object],
      editor: undefined,
      hooks: null,
      privateRuntimeConfig: {},
      publicRuntimeConfig: [Object],
      messages: [Object],
      modes: [Object],
      render: [Object],
      router: [Object],
      cli: [Object],
      generate: [Object],
      appTemplatePath: '/home/mitch/workspace/dev/demo/.nuxt/views/app.template.html',
      store: true,
      app: [Object]
    },
    requiredModules: {
      '@nuxtjs/composition-api': [Object],
      '@nuxt/typescript-build': [Object],
      '@/modules/testing.ts': [Object]
    },
    constructor: [Function: bound ModuleContainer],
    ready: [Function: bound ready] AsyncFunction,
    addVendor: [Function: bound addVendor],
    addTemplate: [Function: bound addTemplate],
    addPlugin: [Function: bound addPlugin],
    addLayout: [Function: bound addLayout],
    addErrorLayout: [Function: bound addErrorLayout],
    addServerMiddleware: [Function: bound addServerMiddleware],
    extendBuild: [Function: bound extendBuild],
    extendRoutes: [Function: bound extendRoutes],
    requireModule: [Function: bound requireModule],
    addModule: [Function: bound addModule] AsyncFunction
  },
  showReady: [Function (anonymous)],
  server: Server {
    nuxt: [Circular *1],
    options: {
      telemetry: [Object],
      head: [Object],
      css: [],
      plugins: [Array],
      components: true,
      buildModules: [Array],
      modules: [Array],
      axios: [Object],
      build: [Object],
      _nuxtConfigFile: '/home/mitch/workspace/dev/demo/nuxt.config.js',
      _nuxtConfigFiles: [Array],
      rootDir: '/home/mitch/workspace/dev/demo',
      _env: [Object: null prototype],
      _envConfig: [Object],
      server: [Object],
      dev: true,
      _build: true,
      _cli: true,
      __normalized__: true,
      globalName: 'nuxt',
      vue: [Object],
      vueMeta: null,
      fetch: [Object],
      extendPlugins: null,
      layouts: {},
      ErrorPage: null,
      loading: [Object],
      loadingIndicator: [Object],
      pageTransition: [Object],
      layoutTransition: [Object],
      features: [Object],
      test: false,
      debug: true,
      env: {},
      createRequire: [Function (anonymous)],
      target: 'server',
      ssr: true,
      mode: 'universal',
      modern: undefined,
      _modules: [Array],
      globals: [Object],
      serverMiddleware: [],
      srcDir: '/home/mitch/workspace/dev/demo',
      buildDir: '/home/mitch/workspace/dev/demo/.nuxt',
      modulesDir: [Array],
      dir: [Object],
      extensions: [Array],
      styleExtensions: [Array],
      alias: [Object],
      ignoreOptions: undefined,
      ignorePrefix: '-',
      ignore: [Array],
      watch: [Array],
      watchers: [Object],
      editor: undefined,
      hooks: null,
      privateRuntimeConfig: {},
      publicRuntimeConfig: [Object],
      messages: [Object],
      modes: [Object],
      render: [Object],
      router: [Object],
      cli: [Object],
      generate: [Object],
      appTemplatePath: '/home/mitch/workspace/dev/demo/.nuxt/views/app.template.html',
      store: true,
      app: [Object]
    },
    globals: {
      id: '__nuxt',
      nuxt: '$nuxt',
      context: '__NUXT__',
      pluginPrefix: 'nuxt',
      readyCallback: 'onNuxtReady',
      loadedCallback: '_onNuxtLoaded'
    },
    publicPath: '/_nuxt/',
    resources: {},
    listeners: [],
    app: [Function: app] {
      use: [Function: use],
      handle: [Function: handle],
      listen: [Function: listen],
      _events: undefined,
      _eventsCount: 0,
      _maxListeners: undefined,
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount],
      eventNames: [Function: eventNames],
      route: '/',
      stack: []
    }
  },
  renderer: Server {
    nuxt: [Circular *1],
    options: {
      telemetry: [Object],
      head: [Object],
      css: [],
      plugins: [Array],
      components: true,
      buildModules: [Array],
      modules: [Array],
      axios: [Object],
      build: [Object],
      _nuxtConfigFile: '/home/mitch/workspace/dev/demo/nuxt.config.js',
      _nuxtConfigFiles: [Array],
      rootDir: '/home/mitch/workspace/dev/demo',
      _env: [Object: null prototype],
      _envConfig: [Object],
      server: [Object],
      dev: true,
      _build: true,
      _cli: true,
      __normalized__: true,
      globalName: 'nuxt',
      vue: [Object],
      vueMeta: null,
      fetch: [Object],
      extendPlugins: null,
      layouts: {},
      ErrorPage: null,
      loading: [Object],
      loadingIndicator: [Object],
      pageTransition: [Object],
      layoutTransition: [Object],
      features: [Object],
      test: false,
      debug: true,
      env: {},
      createRequire: [Function (anonymous)],
      target: 'server',
      ssr: true,
      mode: 'universal',
      modern: undefined,
      _modules: [Array],
      globals: [Object],
      serverMiddleware: [],
      srcDir: '/home/mitch/workspace/dev/demo',
      buildDir: '/home/mitch/workspace/dev/demo/.nuxt',
      modulesDir: [Array],
      dir: [Object],
      extensions: [Array],
      styleExtensions: [Array],
      alias: [Object],
      ignoreOptions: undefined,
      ignorePrefix: '-',
      ignore: [Array],
      watch: [Array],
      watchers: [Object],
      editor: undefined,
      hooks: null,
      privateRuntimeConfig: {},
      publicRuntimeConfig: [Object],
      messages: [Object],
      modes: [Object],
      render: [Object],
      router: [Object],
      cli: [Object],
      generate: [Object],
      appTemplatePath: '/home/mitch/workspace/dev/demo/.nuxt/views/app.template.html',
      store: true,
      app: [Object]
    },
    globals: {
      id: '__nuxt',
      nuxt: '$nuxt',
      context: '__NUXT__',
      pluginPrefix: 'nuxt',
      readyCallback: 'onNuxtReady',
      loadedCallback: '_onNuxtLoaded'
    },
    publicPath: '/_nuxt/',
    resources: {},
    listeners: [],
    app: [Function: app] {
      use: [Function: use],
      handle: [Function: handle],
      listen: [Function: listen],
      _events: undefined,
      _eventsCount: 0,
      _maxListeners: undefined,
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount],
      eventNames: [Function: eventNames],
      route: '/',
      stack: []
    }
  },
  render: [Function: app] {
    use: [Function: use],
    handle: [Function: handle],
    listen: [Function: listen],
    _events: undefined,
    _eventsCount: 0,
    _maxListeners: undefined,
    setMaxListeners: [Function: setMaxListeners],
    getMaxListeners: [Function: getMaxListeners],
    emit: [Function: emit],
    addListener: [Function: addListener],
    on: [Function: addListener],
    prependListener: [Function: prependListener],
    once: [Function: once],
    prependOnceListener: [Function: prependOnceListener],
    removeListener: [Function: removeListener],
    off: [Function: removeListener],
    removeAllListeners: [Function: removeAllListeners],
    listeners: [Function: listeners],
    rawListeners: [Function: rawListeners],
    listenerCount: [Function: listenerCount],
    eventNames: [Function: eventNames],
    route: '/',
    stack: []
  },
  _initCalled: true,
  _ready: Promise { <pending> }
}
